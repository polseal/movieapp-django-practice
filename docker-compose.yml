version: '3.8'
services:
  db:
    image: postgres:14.1-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: movieapp_db
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    ports:
      - "5432:5432"

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15672"]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: main/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      - db
      - rabbitmq
  #frontend:
  #  build:
  #    context: ./frontend
  #    dockerfile: Dockerfile
  #  ports:
  #    - "5173:5173"
  #  volumes:
  #    - .:/app
  #    - /app/node_modules  # Prevents node_modules from being overwritten by the volume
  #  depends_on:
  #    - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5173 || exit 1"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  notification:
    environment:
      - RECIPIENT=${RECIPIENT}
      - USERNAME=${USERNAME}
      - PASSWORD=${PASSWORD}
      
    build:
      context: ./notificationsapp  # Set the build context to the 'notificationsapp' folder
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    depends_on:
      - rabbitmq

volumes:
  postgres_data:
  rabbitmq_data:
  frontend_data:
